<template>
	<div>
		<div v-if="!inLive">
			<div class="row-box">
				<div class="input-flex">
					<div class="input-flex-label">直播标题</div>
					<input v-model="zblive.title" type="text"   class="input-flex-text" maxlength="225" />
				</div>	
				<div class="flex">
					<textarea v-model="zblive.content" placeholder="内容简介" class="textarea-flex-text" maxlength="225"></textarea>
				</div>
				<div class="flex">
					<div @click="createLive()" class="btn-row-submit"><text class="btn-row-submit-text">开启直播</text></div>
				</div>
				
			</div>
			
		</div>
		<div v-if="inLive">
			<div class="ftop">
				
				
							
			</div>
			<live-pusher v-if="pageLoad" :style="{height:liveHeight}" style="width:100%;"  id='livePusher' class="livePusher" ref="livePusher" :url="vurl"
			 :mode="vmode" :muted="false" :enable-camera="true" :auto-focus="true" :beauty="vbeauty" :whiteness="whiteness" aspect="9:16" postition="absolute"
			 @statechange="statechange" @netstatus="netstatus" @error="error"></live-pusher>
			
			<div class="ft-row"></div>
			<div class="ft" >
				<div class="zb-btn" @click="switchCamera"><text class="cl2 f16">切换</text></div>
				 
				<div class="zb-btn" @longpress="stop()" @click="toggleVideo()">
					<text class="cl-red f16" v-if="liveStatus==0">开始直播</text>
					<text class="cl-red f16" v-if="liveStatus==1">正在直播</text>
					<text class="cl-red f16" v-if="liveStatus==2">直播暂停</text>
				</div>
				<div class="zb-btn" @click="toggleConfig" ><text class="cl2 f16">直播设置</text></div>
				 
			</div>
			<div  v-if="vconfig" class="modal-group">
				<div @click="vconfig=false" class="modal-mask"></div>
				<div class="modal-config">
					 
					<div class="flex mgb-10 flex-ai-center">
							<text class="f14">清晰度</text>
							<div class="flex-1">
								<slider @change="changeSD" :value="vmode" min="0" max="2" activeColor="#FFCC33" backgroundColor="#000000" block-color="#8A6DE9" block-size="20" />
							</div>
							<text>{{vmode}}</text>
					</div>
					<div class="flex mgb-10 flex-ai-center">
						<text class="f14">美白</text>
						<div class="flex-1">
							<slider @change="changemb" :value="vwhiteness" min="0" max="9" show-value="true"  activeColor="#FFCC33" backgroundColor="#000000" block-color="#8A6DE9" block-size="20" />							
						</div>
					</div>
					<div class="flex mgb-10 flex-ai-center">
						<text class="f14">美颜</text> 
						<div class="flex-1">
							<slider @change="changemy" :value="vbeauty" min="0" max="9" show-value="true"  activeColor="#FFCC33" backgroundColor="#000000" block-color="#8A6DE9" block-size="20" />							
						</div>
					</div>
					<div>
						<text class="text-center f14 cl2">直播开始前设置才会生效</text>
					</div>
					
				</div>
			</div> 
		</div>
	</div>
</template>

<script>
	var that;
	import $app from "../../common/common.js";
	export default {
		data: {
			fil: true,
			vurl:"",
			liveStatus:0,
			vmode:"HD",
			vbeauty:0,
			vwhiteness:0,
			vconfig:false,
			id:19,
			liveHeight:800,
			pageLoad:false,
			inLive:false,
			zblive:{}
		},
		onLoad(ops) {
			that=this; 
			//this.context = uni.createLivePusherContext("livePusher", this);
		 
			var win=uni.getSystemInfoSync();
			this.liveHeight=win.windowHeight;
			that.checkLive();
		},
		onHide:function(){
			console.log("Hide Page")
		},
		beforeDestroy:function(){
			console.log("desctroy")
			$app.get({
				url:$app.apiHost+"/module.php?m=zblive&a=finish&ajax=1",
				data:{
					id:this.id
				},
				success:function(res){
					if(res.error){
						return false;
					}
					 
				}
			})
		},
		methods: {
			checkLive:function(){
				var that=this;
				$app.get({
					url:$app.apiHost+"/module.php?m=zblive&a=checkLive&ajax=1",
					success:function(res){
						if(res.error){
							if(res.error==1){
								uni.showToast({
									title:"暂无直播权限"
								})
								setTimeout(function(){
									uni.navigateBack()
								},1000)
								
							}
							return false;
						}
						console.log(res.data.rtmp)
						that.vurl=res.data.rtmp;
					 
						that.inLive=true;
						that.id=res.data.id;
						that.pageLoad=true;
						setTimeout(function(){
							that.context = uni.createLivePusherContext("livePusher", that);
							that.start();
						},300)
					}
				})
			},
			createLive:function(){
				var that=this;
				$app.post({
					url:$app.apiHost+"/module.php?m=zblive&a=save&ajax=1",
					data:{
						title:this.zblive.title,
						content:this.zblive.content
					},
					success:function(res){
						if(res.error){
							uni.showToast({
								title:res.message
							})
							return false;
						}
						console.log(res)
						that.id=res.data.id;
						that.vurl=res.data.rtmp;
						 
						that.inLive=true;
						that.pageLoad=true;
						setTimeout(function(){
							that.context = uni.createLivePusherContext("livePusher", that);
							that.start();
						},300)
					}
				})
			},
			getPage:function(){
				var that=this;
				
				 
				$app.get({
					url:$app.apiHost+"/module.php?m=zblive&a=GetRtmp&ajax=1&id="+this.room_id,
					success:function(res){
						console.log(res.data.rtmp);
						if(res.error){
							uni.showToast({
								title:res.message
							})
							return false;
						}
						that.vurl=res.data.rtmp; 
						that.id=res.data.id;
						that.pageLoad=true;
						setTimeout(function(){
							that.context = uni.createLivePusherContext("livePusher", that);
						},300) 
						
					}  
				})
				
			},
			statechange(e) {
				//console.log("statechange:" + JSON.stringify(e));
			},
			netstatus(e) {
				//console.log("netstatus:" + JSON.stringify(e));
			},
			error(e) {
				//console.log("error:" + JSON.stringify(e));
			},
			toggleConfig:function(){
				if(this.vconfig){
					this.vconfig=false;
				}else{
					this.vconfig=true;
				}
			},
			changemb:function(e){
				var v=e.detail.value;
				this.vwhiteness=v;
			},
			changemy:function(e){
				var v=e.detail.value;
				this.vbeauty=v;
			},
			changeSD:function(e){
				var v=e.detail.value;
				switch(v){
					case 1:
						this.vmode="HD"
						break;
					case 2:
						this.vmode="FHD"
						break;
					default:
						this.vmode="SD"
						break;
				}
				
			},
			toggleVideo:function(){
				if(this.liveStatus==0 ){
					this.start();
				}else if(this.liveStatus==1){
					this.pause();
				}else if(this.liveStatus==2){
					this.resume();
				}
			},
			start: function() {
				this.context.start({
					success: (a) => {
						that.liveStatus=1;
						console.log("livePusher.start:" + JSON.stringify(a));
					}
				});
			},
			close: function() {
				this.context.close({
					success: (a) => {
						that.liveStatus=0;
						//console.log("livePusher.close:" + JSON.stringify(a));
					}
				});
			},
			snapshot: function() {
				this.context.snapshot({
					success: (e) => {
						//console.log(JSON.stringify(e));
					}
				});
			},
			resume: function() {
				this.context.resume({
					success: (a) => {
						that.liveStatus=1;
					}
				});
			},
			pause: function() {
				this.context.pause({
					success: (a) => {
						that.liveStatus=2;
					}
				});
			},
			stop: function() {
				this.context.stop({
					success: (a) => {
						that.liveStatus=0;
						 
					}
				});
			},
			switchCamera: function() {
				this.context.switchCamera({
					success: (a) => {
						//console.log("livePusher.switchCamera:" + JSON.stringify(a));
					}
				});
			},
			startPreview: function() {
				this.context.startPreview({
					success: (a) => {
						//console.log("livePusher.startPreview:" + JSON.stringify(a));
					}
				});
			},
			stopPreview: function() {
				this.context.stopPreview({
					success: (a) => {
						//console.log("livePusher.stopPreview:" + JSON.stringify(a));
					}
				});
			}
		}
	}
</script>

<style>
	@import "../../common/dt-ui-nvue.css";
.ftop{
	position: fixed;
	top:0rpx;
	left: 0;
	right: 0;
	flex-direction: row;
	justify-content: space-between;
	padding: 26rpx;
}
.ft-row{
	height: 220rpx;
}
.ft{
	position: fixed;
	bottom:0rpx;
	left: 0;
	right: 0;
	flex-direction: row;
	justify-content: space-between;
	padding: 26rpx;
}
.zb-btn{
	border-radius: 80rpx;
	padding: 24rpx 44rpx;
	border-color: #f30;
	border-width: 4rpx;
	border-style: solid;
	color: #f30;
	font-size: 30px;
}
.modal-config{
	position: fixed;
	bottom:220rpx;
	left: 0;
	right: 0;
	padding: 44rpx;
	background-color: #fff;
}
</style>
